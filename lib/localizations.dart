import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
class AppLocalizations {
  static String get appTitle => _getText('appTitle');

  static String get generalPlay => _getText('generalPlay');

  static String get generalContinue => _getText('generalContinue');

  static String get settingsScreenDarkModeLabel =>
      _getText('settingsScreenDarkModeLabel');

  static String get settingsScreenLanguageLabel =>
      _getText('settingsScreenLanguageLabel');

  static String get generalCommingSoon => _getText('generalCommingSoon');

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'appTitle': '¿El o La?',
    'generalPlay': 'Play',
    'generalContinue': 'Continue',
    'settingsScreenDarkModeLabel': 'Dark Mode',
    'settingsScreenLanguageLabel': 'Language',
    'generalCommingSoon': 'Comming Soon!',
  };

  static Map<String, String> _deValues = {
    'appTitle': '[ ¿El o La? ßüÄÜẞ ]',
    'generalPlay': '[ Play ẞä ]',
    'generalContinue': '[ Cöntinüe ẞääÖ ]',
    'settingsScreenDarkModeLabel': '[ Dark Möde ẞößÖÄ ]',
    'settingsScreenLanguageLabel': '[ Langüage ßẞÜẞ ]',
    'generalCommingSoon': '[ Cömming Söön! ÖüÜäÜÖ ]',
  };

  static Map<String, String> _plValues = {
    'appTitle': '[ ¿El o La? śŁĆŃę ]',
    'generalPlay': '[ Płay Ćó ]',
    'generalContinue': '[ Ćóńtińuę śżćŻ ]',
    'settingsScreenDarkModeLabel': '[ Dark Módę óóńŻÓ ]',
    'settingsScreenLanguageLabel': '[ Łańguagę ŃęźĄ ]',
    'generalCommingSoon': '[ Ćómmińg Śóóń! źóźĘĘó ]',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
    'de': _deValues,
    'pl': _plValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('de'),
    Locale('pl'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
